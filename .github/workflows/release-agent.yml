name: Release Agent with Provenance

on:
  workflow_dispatch:  # Manual trigger (no inputs needed)
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
    paths:
      # Agent source files
      - 'scripts/local-agent.js'
      - 'scripts/runner-core-selenium.js'
      - 'scripts/runner-core-selenium-test.js'
      - 'scripts/agent-launcher.js'
      - 'scripts/cli-runner.js'
      - 'scripts/selenium-runner.js'
      # Build and packaging scripts
      - 'scripts/copy-chromedriver.js'
      - 'scripts/copy-runtime-deps.js'
      - 'scripts/generate-dist-readme.js'
      - 'scripts/pkg-prune.js'
      # Dependencies
      - 'package.json'
      - 'package-lock.json'
      # Workflow itself
      - '.github/workflows/release-agent.yml'

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      artifact-name: ${{ steps.artifact-info.outputs.name }}
      artifact-path: ${{ steps.artifact-info.outputs.path }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build agent exe + copy runtime deps
        run: npm run pkg:agent:win:with-chromedriver
      
      - name: Create distribution archive
        id: archive
        shell: pwsh
        run: |
          # Always use stable filename
          $zipName = "idt-agent-windows.zip"
          Compress-Archive -Path dist\* -DestinationPath $zipName -Force
          echo "zip-name=$zipName" >> $env:GITHUB_OUTPUT
          echo "zip-path=$(Resolve-Path $zipName)" >> $env:GITHUB_OUTPUT
      
      - name: Set artifact info
        id: artifact-info
        shell: pwsh
        run: |
          echo "name=${{ steps.archive.outputs.zip-name }}" >> $env:GITHUB_OUTPUT
          echo "path=${{ steps.archive.outputs.zip-path }}" >> $env:GITHUB_OUTPUT
      
      - name: Generate attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ steps.archive.outputs.zip-path }}
      
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: ${{ steps.archive.outputs.zip-name }}
          if-no-files-found: error
      
      - name: Portability smoke test
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $dst = "$env:TEMP\idt-agent-portable-test"
          if (Test-Path $dst) { Remove-Item -Recurse -Force $dst }
          New-Item -ItemType Directory -Path $dst | Out-Null
          Copy-Item -Recurse -Force .\dist\* $dst
          
          # Verify required files
          if (!(Test-Path "$dst\idt-agent.exe")) { throw 'idt-agent.exe missing' }
          if (!(Test-Path "$dst\runner-core-selenium.js")) { throw 'runner-core-selenium.js missing' }
          if (!(Test-Path "$dst\chromedriver.exe")) { throw 'chromedriver.exe missing' }
          if (!(Test-Path "$dst\node_modules\selenium-webdriver")) { throw 'selenium-webdriver missing' }
          if (!(Test-Path "$dst\node_modules\tmp")) { throw 'tmp module missing' }
          if (!(Test-Path "$dst\node_modules\jszip")) { throw 'jszip module missing' }
          if (!(Test-Path "$dst\node_modules\setimmediate")) { throw 'setimmediate module missing' }
          if (!(Test-Path "$dst\node_modules\ws")) { throw 'ws module missing' }
          if (!(Test-Path "$dst\node_modules\@bazel\runfiles")) { throw '@bazel/runfiles module missing' }
          
          # Health check test
          $env:IDT_AGENT_PORT = '4799'
          $p = Start-Process -FilePath "$dst\idt-agent.exe" -PassThru
          try {
            Start-Sleep -Seconds 3
            $res = Invoke-WebRequest -Uri "http://127.0.0.1:$($env:IDT_AGENT_PORT)/health" -UseBasicParsing -TimeoutSec 5
            if ($res.StatusCode -ne 200) { throw "health returned $($res.StatusCode)" }
            Write-Host "✓ Portability test passed"
          } finally {
            try { Stop-Process -Id $p.Id -Force } catch {}
          }

  build-macos:
    runs-on: macos-latest
    outputs:
      artifact-name: ${{ steps.artifact-info.outputs.name }}
      artifact-path: ${{ steps.artifact-info.outputs.path }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build agent (mac) and copy runtime deps
        run: |
          npm run pkg:agent:mac
          node scripts/copy-chromedriver.js || true
          node scripts/copy-runtime-deps.js || true
      
      - name: Create distribution archive
        id: archive
        run: |
          # Always use stable filename
          zip_name="idt-agent-macos.zip"
          cd dist && zip -r "../${zip_name}" . && cd ..
          echo "zip-name=${zip_name}" >> $GITHUB_OUTPUT
          echo "zip-path=$(pwd)/${zip_name}" >> $GITHUB_OUTPUT
      
      - name: Set artifact info
        id: artifact-info
        run: |
          echo "name=${{ steps.archive.outputs.zip-name }}" >> $GITHUB_OUTPUT
          echo "path=${{ steps.archive.outputs.zip-path }}" >> $GITHUB_OUTPUT
      
      - name: Generate attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ steps.archive.outputs.zip-path }}
      
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: ${{ steps.archive.outputs.zip-name }}
          if-no-files-found: error
      
      - name: Portability smoke test
        run: |
          set -euo pipefail
          dst="$(mktemp -d)/idt-agent-portable-test"
          mkdir -p "$dst"
          cp -R dist/* "$dst"/
          
          # Verify required files
          test -f "$dst/idt-agent" || { echo 'idt-agent missing' ; exit 1; }
          test -f "$dst/runner-core-selenium.js" || { echo 'runner-core-selenium.js missing'; exit 1; }
          test -d "$dst/node_modules/selenium-webdriver" || { echo 'selenium-webdriver missing'; exit 1; }
          test -d "$dst/node_modules/tmp" || { echo 'tmp missing'; exit 1; }
          test -d "$dst/node_modules/jszip" || { echo 'jszip missing'; exit 1; }
          test -d "$dst/node_modules/ws" || { echo 'ws missing'; exit 1; }
          test -d "$dst/node_modules/@bazel/runfiles" || { echo '@bazel/runfiles missing'; exit 1; }
          
          # Health check test
          export IDT_AGENT_PORT=4799
          chmod +x "$dst/idt-agent" || true
          AGENT_LOG="$dst/agent.log"
          "$dst/idt-agent" > "$AGENT_LOG" 2>&1 &
          pid=$!
          
          # Poll /health for up to 15 seconds
          ok=1
          for i in $(seq 1 15); do
            if curl -sf "http://127.0.0.1:${IDT_AGENT_PORT}/health" >/dev/null 2>&1; then
              ok=0
              break
            fi
            sleep 1
          done
          
          if [ "$ok" -ne 0 ]; then
            echo 'Portability smoke test failed: /health not reachable. Agent log follows:'
            sed -n '1,200p' "$AGENT_LOG" || true
            kill "$pid" || true
            exit 1
          fi
          
          echo "✓ Portability test passed"
          kill "$pid" || true

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: ./release-artifacts
      
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-release
          path: ./release-artifacts
      
      - name: Determine version
        id: version
        run: |
          # Create unique versioned tag for this release
          version=$(node -p "require('./package.json').version")
          short_sha=$(git rev-parse --short HEAD)
          versioned_tag="v${version}-${short_sha}"
          
          echo "version=${versioned_tag}" >> $GITHUB_OUTPUT
          echo "build-info=${versioned_tag}" >> $GITHUB_OUTPUT
      
      - name: Generate release notes
        id: release-notes
        run: |
          cat > release-notes.md << 'EOF'
          ## IDT Local Agent
          
          Desktop automation agent for bulk DNA oligonucleotide ordering from IDT.
          
          ### Download & Install
          
          **Windows 10+:**
          1. Download `idt-agent-windows.zip`
          2. Extract to any folder
          3. Run `idt-agent.exe`
          
          **macOS 10.15+:**
          1. Download `idt-agent-macos.zip`
          2. Extract to any folder
          3. Run `./idt-agent`
          
          Agent listens on `http://127.0.0.1:4599` - use the web UI @ https://idt-react.vercel.app/ to submit orders.
          
          ### Requirements
          
          - Chrome browser installed
          - Windows 10+ or macOS 10.15+
          
          ### What It Does
          
          - Receives order submissions from web UI
          - Launches Chrome with Selenium automation
          - Fills IDT bulk order form with your sequences
          - Adds items to cart for review and checkout
          
          ### Verify Build Provenance
          
          ```bash
          gh attestation verify idt-agent-windows.zip -R ${{ github.repository }}
          ```
          
          ---
          
          Build: ${{ steps.version.outputs.build-info }} (${{ github.sha }})
          EOF
          
          echo "notes-file=release-notes.md" >> $GITHUB_OUTPUT
      
      - name: Create versioned release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Agent ${{ steps.version.outputs.build-info }}
          body_path: ${{ steps.release-notes.outputs.notes-file }}
          files: |
            ./release-artifacts/*.zip
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update latest tag
        run: |
          # Force update the 'latest' tag to point to this commit
          git tag -f latest
          git push origin latest -f
          
          # Update the 'latest' release to use the same files
          gh release delete latest --yes || true
          gh release create latest \
            --title "Agent (Latest)" \
            --notes "This release always points to the most recent build. Download the versioned release for a permanent link.

          **Current build:** ${{ steps.version.outputs.build-info }}

          See [Agent ${{ steps.version.outputs.build-info }}](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}) for the permanent versioned release." \
            ./release-artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
